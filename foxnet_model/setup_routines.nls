
to check-for-errors
    
  ; spatial inputs
  
  ; time units
  
  if bait-layout != "none" and bait-frequency = "weekly*" and weeks-per-timestep != 1
    [error  "ERROR - check that the time-step interval and bait-frequency inputs are compatible (baiting cannot occur more than once per time-step)" ]
   
  if bait-layout != "none" and bait-frequency = "fortnightly*" 
  [
    if (weeks-per-timestep != 1 and weeks-per-timestep != 2)
    [error "ERROR - check that the time-step interval and bait-frequency inputs are compatible (baiting cannot occur more than once per time-step)"]
  ]
  
  if bait-layout != "none" and bait-frequency = "custom*"
  [
    let bait-weeks read-from-string custom-bait-weeks 
    foreach bait-weeks 
    [a ->  if (a - 1) MOD weeks-per-timestep != 0
      [error  "ERROR - check that the time-step interval and custom-bait-weeks inputs are compatible (baiting cannot occur in weeks that will not be included in the time-steps)" ]
    ]
  ]
 
  
  ; range parameters
  set fox-hr-percentiles read-from-string kernel-percent
  set fox-hr-areas read-from-string home-range-area
  
  if range-calculation = "1 kernel, min and max" and length fox-hr-percentiles > 1
  [error "ERROR - please only enter 1 home range kernel value"]
  
  if range-calculation = "1 kernel, min and max" and length fox-hr-areas != 2
  [error "ERROR - please enter a minumum and maximum value for fox home-range-area"]
  
   if range-calculation = "1 kernel, 1 mean" and (length fox-hr-percentiles != 1 or length fox-hr-areas != 1)
  [error "ERROR - please enter one kernel-percent value and one home-range-area value"]
  
  ; dispersal parameters
  if (dispersal-season-ends - 1)  MOD weeks-per-timestep != 0 or (dispersal-season-begins - 1) MOD weeks-per-timestep != 0
  [error "ERROR - check that your choice of dispersal weeks is compatible with the time-step interval (dispersal cannot start or end in weeks that will not be included in the time-steps)"]
  
  if dispersal-season-ends = dispersal-season-begins
  [error "ERROR - the dispersal season needs to last for at least one time-step each year.  Please check."]

  ; breeding parameters
  if (cub-birth-season - 1)  MOD weeks-per-timestep != 0 
  [error "ERROR - check that your choice of cub-birth-season is compatible with the time-step interval (cubs cannot be born in weeks that will not be included in the time-steps)"]
  
  ; monitoring parameters
  if foxes-on-transect = true and survey-transect-shp = ""
  [error "ERROR - you've asked the model to monitor foxes on a transect but no transect has been imported"]
  
  if landscape-source = "import raster" and region-shp = "" and region2-shp != "" 
  [error "ERROR - you need to import a shapefile for Region 1 if you are going to import a shapefile for Region 2"]
  
  if landscape-source = "generate" and bait-layout = "custom"
  [error "ERROR - you can't use a customised bait layer in a model-generated landscape.  Please change `bait-layout` to another option, or import a raster layer for the landscape."]
  
  
  
end

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

to calculate-conversion-factors

  set kms-to-cells 1000 / cell-dimension
  set km2-to-cells 1000000 / (cell-dimension * cell-dimension)
  set cells-to-km2 (cell-dimension * cell-dimension) / 1000000
  
end

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;



to set-fox-parameters
  
  set adult-fox-metabolic-min-daily-food 295; minimum daily food requirement for short-term survival of adult fox (g)
  set min-productivity-for-metabolic-rate adult-fox-metabolic-min-daily-food * 7 * weeks-per-timestep
  set adult-fox-daily-food 378; average daily food requirement of adult fox (g)
  set adult-fox-timestep-food adult-fox-daily-food * 7 * weeks-per-timestep
  set home-range-100perc ((200 - max fox-hr-percentiles) / 100) * max fox-hr-areas
  set maximum-territory-update-area home-range-100perc * 0.5; area of new territory that fox-family can acquire/swap each time-step (in km2)

  set territory-perception-radius (sqrt (home-range-100perc / pi )) * 3  ; (in km)
  
  ifelse dispersal-season-ends > dispersal-season-begins
    [set dispersal-duration (dispersal-season-ends - dispersal-season-begins) / weeks-per-timestep]
    [set dispersal-duration (dispersal-season-ends + (52 - dispersal-season-begins)) / weeks-per-timestep]
  ;print dispersal-duration * weeks-per-timestep
  
end


;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

to create-world
  
  ;;;;;; if the landscape is generated by the model ;;;;;
  
  if landscape-source = "generate"
  [
    let world-side (sqrt (landscape-size * km2-to-cells))
    resize-world 0 (world-side - 1 ) 0 (world-side - 1)
    ask patches 
    [ set available-to-foxes true  ]    
    gis:set-transformation (list min-pxcor max-pxcor min-pycor max-pycor) (list min-pxcor max-pxcor min-pycor max-pycor) ; needed so that density map can be exported
  ]
  
   ;;;;;; if the landscape is imported as a raster  ;;;;;;
  
  if landscape-source = "import raster" 
  [ 
    set landscape-data gis:load-dataset landscape-raster
    resize-world 0 (gis:width-of landscape-data - 1) 0 (gis:height-of landscape-data - 1)
    gis:set-world-envelope ( gis:envelope-of landscape-data )
    gis:apply-raster landscape-data habitat-type   
    set landscape-data "1" ;remove the large raster file from the model memory
    
    ; identify patches that can never be used (e.g. ocean, waterways)
    ask patches
    [
      ifelse habitat-type = uninhabitable-raster-value
       [ set available-to-foxes false 
        set true-color white
       ]
      [  set available-to-foxes true ]
    ]
  ]
  
  ;;;;;;;; all setup options ;;;;;;;;;;;
  
  set available-landscape patches with [available-to-foxes = true]
  set available-landscape-size count available-landscape * cells-to-km2; calculates world size in km2   

  ask available-landscape
  [
    set fox-family-owner nobody
    set part-of-region-of-interest false
    set part-of-region-of-interest2 false
    set cell-relative-productivity 0
    set cell-relative-use 0
    set cell-fox-density 0
    set cell-fox-density-no-cubs 0
    set checked-already "no"
    set true-color 0
  ]
  
end

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

to identify-region-of-interest
  
  ifelse landscape-source = "generate" or region-shp = ""
  
  ; generate a central square with as close to possible the specified area
  [
    let length-region sqrt(region-size) * kms-to-cells
    let length-disinterest-x (world-width - length-region) / 2 
    let length-disinterest-y (world-height - length-region) / 2
    
    ask available-landscape with [pxcor  >= length-disinterest-x and pycor  >= length-disinterest-y]
      [
         set part-of-region-of-interest true
         set true-color true-color + 5
      ]
    
    ask available-landscape with [pxcor > (max-pxcor + 1 - length-disinterest-x) or pycor > (max-pycor + 1 - length-disinterest-y)]
      [
        set part-of-region-of-interest false
        set true-color 0
      ]
  ]
  
  ; alternatively, import a shapefile of the region-of-interest
  [
    set region-of-interest-data gis:load-dataset region-shp  
    ask available-landscape gis:intersecting region-of-interest-data   
    [ 
      set part-of-region-of-interest true
      set true-color true-color + 5
    ]
          
   ; set up a second customised region-of-interest if required 
    if region2-shp != ""
    [
      set region-of-interest2-data gis:load-dataset region2-shp
      ask available-landscape gis:intersecting region-of-interest2-data
      [ 
        set part-of-region-of-interest2 true
        set true-color true-color + 7
      ]
    
      set region-of-interest2 patch-set patches with [part-of-region-of-interest2 = true]
      set region-of-interest2-size count region-of-interest2 * cells-to-km2
      ;  print region-of-interest2-size
    ]
  ]
  
  ; regardless of approach, set region-of-interest
  set region-of-interest patch-set patches with [part-of-region-of-interest = true]
  set region-of-interest-size count region-of-interest * cells-to-km2

end

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

to set-landscape-productivity
  
  if range-calculation = "1 kernel, 1 mean"
  [
    let mean-productivity adult-fox-timestep-food * (mean fox-hr-percentiles / 100) / (min fox-hr-areas * km2-to-cells)
    ask available-landscape
    [
      set true-productivity mean-productivity
    ]
  ]
  
  if range-calculation = "1 kernel, min and max"
   [
     let max-productivity adult-fox-timestep-food * (mean fox-hr-percentiles / 100) /  (min fox-hr-areas * km2-to-cells)
     let min-productivity adult-fox-timestep-food * (mean fox-hr-percentiles / 100) / (max fox-hr-areas * km2-to-cells)
     
     ask available-landscape
     [
      set true-productivity random (max-productivity - min-productivity + 1) + min-productivity
     ]
   ]

; specify other patch parameters

  if landscape-source = "import raster"
  [
    ask available-landscape
    [ if habitat-type = second-habitat-raster-value  
      [
        set true-productivity true-productivity * hab2:hab1
        set true-color true-color + 2
      ]
      
      if habitat-type = third-habitat-raster-value  
      [
        set true-productivity true-productivity * hab3:hab1
        set true-color true-color - 2
      ]
    ]
  ]
  
  ask available-landscape
  [set current-productivity true-productivity]
    
end

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

to set-up-bait-stations
 
 if bait-layout = "custom"
    [    
        set baitsite-data gis:load-dataset bait-layout-shp
        ask patches gis:intersecting baitsite-data
        [ sprout-bait-stations 1
          [
            set color white
            set shape "square"
            set size 4
            set bait-present false
          ]
        ]
  ]


 if bait-layout = "random-scatter"and bait-density > 0
   [
     let number-of-baits bait-density * landscape-size
     ask n-of number-of-baits patches
     [
       sprout-bait-stations 1
         [
           set color white
           set shape "square"
           set size 4
           set bait-present false
         ]
     ]
   ]

 if bait-layout = "grid"and bait-density > 0
   [
     let grid-size (1000  / cell-dimension) / sqrt (bait-density)
     ;next 3 lines copied from Wilensky, U. (2003). NetLogo Traffic Grid model. http://ccl.northwestern.edu/netlogo/models/TrafficGrid. Center for Connected Learning and Computer-Based Modeling, Northwestern University, Evanston, IL.
     let bait-sites patches with
     [(floor((pxcor + max-pxcor - floor(grid-size - 1)) mod grid-size) = 0) and
       (floor((pycor + max-pycor) mod grid-size) = 0)]

     ask bait-sites
     [
       sprout-bait-stations 1
         [
           set color white
           set shape "square"
           set size 1
           set bait-present false
         ]

     ]
   ]
    
end

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

to set-up-foxes

  if initial-fox-density > 0
  [
    create-foxes available-landscape-size  * initial-fox-density
    [ 
    ;pendown
    set status "disperser"; 'disperser' refers to a fox that is not a cub and is looking for a territory
    set size 6
    set age (36 + random 130 ) ; initial foxes are given an age between 9 months and 3 years
    ifelse random-float 1 < propn-cubs-female ; set sex ratio of population
        [set sex "female" set color yellow + 4 ]
        [set sex "male" set color yellow]
    set family-id nobody
    set natal-id nobody
    set failed-territory-id [0]
    move-to one-of available-landscape
    set natal-cell patch-here
    ;pendown
    
    ]
    
    foxes-disperse
  ]
  
end

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

to set-up-survey-transect
  if landscape-source = "import raster" and survey-transect-shp != ""
  [ 
    set survey-line gis:load-dataset survey-transect-shp
    set my-survey-transect patch-set patches gis:intersecting survey-line
    ask my-survey-transect
    [ set true-color red]
    
   if survey-transect2-shp != ""
    [    
      set survey-line2 gis:load-dataset survey-transect2-shp
      set my-survey-transect2 patch-set patches gis:intersecting survey-line2
      ask my-survey-transect2
     [ set true-color green] 
    ]
  ]
end

